package com.kodilla.patterns2.aop.calculator;


import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.math.BigInteger;

import static org.junit.Assert.*;

@RunWith(SpringRunner.class)
@SpringBootTest
public class CalculatorTestSuite {
    @Autowired
    private Calculator calculator;
    private static final Logger LOGGER =
            LoggerFactory.getLogger(CalculatorTestSuite.class);

    @Test
    public void testAdd() {
        //Given
        //When
        double result = calculator.add(10, 15);
        //Then
        LOGGER.info("Testing add method");
        assertEquals(25, result, 0);
    }
    @Test
    public void testSub() {
        //Given
        //When
        double result = calculator.sub(10, 15);
        //Then
        LOGGER.info("Testing sub method");
        assertEquals(-5, result, 0);
    }
    @Test
    public void testMul() {
        //Given
        //When
        double result = calculator.mul(10, 15);
        //Then
        LOGGER.info("Testing mul method");
        assertEquals(150, result, 0);
    }
    @Test
    public void testDiv() {
        //Given
        //When
        double result = calculator.div(15, 5);
        //Then
        LOGGER.info("Testing div method");
        assertEquals(3, result, 0);
    }
    @Test
    public void testFactorial() {
        //Given
        BigInteger bigInteger = new BigInteger(
                "4023872600770937735437024339230039857193748642107146325437999104299385123986290205920" +
                "4420848696940480047998861019719605863166687299480855890132382966994459099742450408707375991882362772718" +
                "8732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849" +
                "9770124766328898359557354325131853239584630755574091142624174743493475534286465766116677973966688202912" +
                "0737914385371958824980812686783837455973174613608537953452422158659320192809087829730843139284440328123" +
                "1558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151" +
                "0273418279777047846358681701643650241536913982812648102130927612448963599287051149649754199093422215668" +
                "3257208082133318611681155361583654698404670897560290095053761647584772842188967964624494516076535340819" +
                "8901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535" +
                "1473316117021039681759215109077880193931781141945452572238655414610628921879602238389714760885062768629" +
                "6714667469756291123408243920816015378088989396451826324367161676217916890977991190375403127462228998800" +
                "5195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520" +
                "7515162842255402651704833042261439742869330616908979684825901254583271682264580665267699586526822728070" +
                "7578139185817888965220816434834482599326604336766017699961283186078838615027946595513115655203609398818" +
                "0612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190" +
                "6209290231364932734975655139587205596542287497740114133469627154228458623773875382304838656889764619273" +
                "8381490014076731044664025989949022222176590433990188601856652648506179970235619389701786004081188972991" +
                "8311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186" +
                "6493531439701374285319266498753372189406942814341185201580141233448280150513996942901534830776445690990" +
                "7315243327828826986460278986432113908350621709500259738986355427719674282224875758676575234422020757363" +
                "0569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510" +
                "6401821543994571568059418727489980942547421735824010636774045957417851608292301353580818400969963725242" +
                "3056085590370062427124341690900415369010593398383577793941097002775347200000000000000000000000000000000" +
                "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "00000000000");
        //When
        BigInteger result = calculator.factorial(new BigInteger("1000"));
        //Then
        LOGGER.info("Testing factorial method");
        System.out.println(result);
        assertTrue(BigInteger.ONE.compareTo(result) < 0);
        assertEquals(bigInteger, result);
    }
}
